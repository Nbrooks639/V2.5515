   
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  #{% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  #CLEAN_NOZZLE
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  #BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S200                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    #G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    #G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed 
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 190c"          # Displays info
  M109 S190                                    # Heats the nozzle to 150c

  #  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  #  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  #G1 X{x_wait} Y{y_wait} Z10 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  CLEAN_NOZZLE
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  #VORON_PURGE
  G1 X80 E30 F1000                                # Purge line
  G90                                              # Absolut position
#####################################################################################################################################

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-15.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F30000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    G4 S3                          ; wait 3 seconds
    M18                            ; disable motors

###############################################################################################

##########################################################################

########################################################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=10 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=2

#########################################################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

###############################################################################

[gcode_macro CLEAN_NOZZLE]
## voron 2.4 300 ###
variable_start_x: 236.50
variable_start_y: 296.00
variable_start_z: 3.50
variable_wipe_dist: 40
variable_wipe_qty: 4
variable_wipe_spd: 150
variable_raise_distance: 10

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

################################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
   
   M83                            ; set extruder to relative
   G1 E8 F300                     ; extrude a little to soften tip
   G1 E-45 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute
   #M104 S0                        ; turn off hot end

#################################################################################

[gcode_macro M600]
description: Filament change
gcode: PAUSE X=10 Y=10 Z_MIN=50

###############################################################################

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.settings %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["beacon"] %}
        # probe section found
        {% set probe = config["beacon"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        {% if probe.z_offset is defined %}
            RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        {% elif probe.trigger_distance is defined %}
            RESPOND MSG="Configured Probe Trigger Distance {probe.trigger_distance}"
        {% endif %}
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}
################################################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E12 F{max_velocity} # fast-load
    G1 E10 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state


##################################################################################################################
#########################################%%%$$$$$$$$$$$$$$$#########################################################
## BTT KnOmI  ###

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
    BED_MESH_CALIBRATE_BASE
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False

# # ## KNOMI QGL (replace your existing gcode_macro for QUAD_GANTRY_LEVEL)

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QGL_BASE
gcode:
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
    STATUS_LEVELING
    QGL_BASE {rawparams}
    STATUS_READY
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
	
############################################################################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

#################################################################

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

################################################################

# [filament_switch_sensor switch_sensor]
# switch_pin: ^PC15
# pause_on_runout: True
# runout_gcode:
#   PAUSE # [pause_resume] is required in printer.cfg
#   M117 Filament switch runout
# insert_gcode:
#   M117 Filament switch inserted

# ################################################################################

# [filament_motion_sensor encoder_sensor]
# switch_pin: ^PF1
# detection_length: 2.88
# extruder: extruder
# pause_on_runout: True
# runout_gcode:
#   PAUSE # [pause_resume] is required in printer.cfg
#   M117 Filament encoder runout
# insert_gcode:
#   M117 Filament encoder inserted

########################################################################

[gcode_macro KATO]
description: Klipper Augmented Text Optimizer
description: Allows user to customize all aspects of text generation
gcode:
    {% set msg = namespace() %}
    {% set colored_text = namespace() %}
    {% set message = params.MESSAGE | default("Welcome to KATO, the Klipper Augmented Text Optimizer!") | string %}
    {% set by_word = params.BY_WORD | default(false) %}
    {% set randomize = params.RANDOMIZE | default(true) %}
    
    {%- macro style_text(text, font_color, bg_color, font_size, font_style, bold_style, italic_style, line_style, line_color, opacity_style, border_style, glow_style) -%}
        <span class="{ font_color }--text" style="background:{ bg_color }; font-size:{ font_size }px;{ font_style }{ bold_style }{ italic_style }{ line_style }{ line_color }{ opacity_style }{ border_style }{ glow_style }">{ text }</span>
    {%- endmacro %}

    {% if params.PALETTE is defined and params.PALETTE == "1" %}
        {% set font_colors = params.FONT_COLORS.split(',') if params.FONT_COLORS is defined else ["primary", "error", "warning", "accent"] %}
        {% set bg_colors = params.BG_COLORS.split(',') if params.BG_COLORS is defined else ["black", "yellow", "blue", "green"] %}
        {% set font_sizes = params.FONT_SIZES.split(',') if params.FONT_SIZES is defined else ["24", "16"] %}
        {% set bold = params.BOLD.split(',') if params.BOLD is defined else ["none"] %}
        {% set italic = params.ITALIC.split(',') if params.ITALIC is defined else ["none", "italic"] %}
        {% set lines = params.LINES.split(',') if params.LINES is defined else ["underline", "none"] %}
        {% set line_colors = params.LINE_COLORS.split(',') if params.LINE_COLORS is defined else ["blue", "red"] %}
        {% set fonts = params.FONTS.split(',') if params.FONTS is defined else ["Arial", "Times New Roman", "Verdana", "Helvetica"]  %}
        {% set opacities = params.OPACITIES.split(',') if params.OPACITIES is defined else ["0.25", "0.5", "0.75", "1"] %}
        {% set border_sizes = params.BORDER_SIZES.split(',') if params.BORDER_SIZES is defined else ["2", "3", "2.5", "1"] %}
        {% set border_colors = params.BORDER_COLORS.split(',') if params.BORDER_COLORS is defined else ["black", "yellow", "blue", "green"] %}
        {% set border_types = params.BORDER_TYPES.split(',') if params.BORDER_TYPES is defined else ["dotted", "ridge", "none"] %}
        {% set glow_colors = params.GLOW_COLORS.split(',') if params.GLOW_COLORS is defined else ["yellow", "blue", "green", "black"] %}
        {% set glow_sizes = params.GLOW_SIZES.split(',') if params.GLOW_SIZES is defined else ["2", "3", "2.5", "1"] %}
    {% elif params.PALETTE is defined and params.PALETTE == "2" %}
        {% set font_colors = params.FONT_COLORS.split(',') if params.FONT_COLORS is defined else ["primary", "success", "info", "secondary"] %}
        {% set bg_colors = params.BG_COLORS.split(',') if params.BG_COLORS is defined else ["white", "gray", "purple", "orange"] %}
        {% set font_sizes = params.FONT_SIZES.split(',') if params.FONT_SIZES is defined else ["18", "24", "16", "28"] %}
        {% set bold = params.BOLD.split(',') if params.BOLD is defined else ["none", "bold"] %}
        {% set italic = params.ITALIC.split(',') if params.ITALIC is defined else ["italic"] %}
        {% set lines = params.LINES.split(',') if params.LINES is defined else ["underline"] %}
        {% set line_colors = params.LINE_COLORS.split(',') if params.LINE_COLORS is defined else ["green", "blue"] %}
        {% set fonts = params.FONTS.split(',') if params.FONTS is defined else ["Arial", "Verdana", "Gothic", "Calibri"] %}
        {% set opacities = params.OPACITIES.split(',') if params.OPACITIES is defined else ["0.25"] %}
        {% set border_sizes = params.BORDER_SIZES.split(',') if params.BORDER_SIZES is defined else ["2", "3", "none", "2.5"] %}
        {% set border_colors = params.BORDER_COLORS.split(',') if params.BORDER_COLORS is defined else ["yellow"] %}
        {% set border_types = params.BORDER_TYPES.split(',') if params.BORDER_TYPES is defined else ["solid", "none"] %}
        {% set glow_colors = params.GLOW_COLORS.split(',') if params.GLOW_COLORS is defined else ["cyan", "green"] %}
        {% set glow_sizes = params.GLOW_SIZES.split(',') if params.GLOW_SIZES is defined else ["11"] %}
    {% elif params.PALETTE is defined and params.PALETTE == "3" %}
        {% set font_colors = params.FONT_COLORS.split(',') if params.FONT_COLORS is defined else ["info", "secondary"] %}
        {% set bg_colors = params.BG_COLORS.split(',') if params.BG_COLORS is defined else ["purple"] %}
        {% set font_sizes = params.FONT_SIZES.split(',') if params.FONT_SIZES is defined else ["28"] %}
        {% set bold = params.BOLD.split(',') if params.BOLD is defined else ["bold"] %}
        {% set italic = params.ITALIC.split(',') if params.ITALIC is defined else ["italic"] %}
        {% set lines = params.LINES.split(',') if params.LINES is defined else ["underline"] %}
        {% set line_colors = params.LINE_COLORS.split(',') if params.LINE_COLORS is defined else ["blue"] %}
        {% set fonts = params.FONTS.split(',') if params.FONTS is defined else ["Arial"] %}
        {% set opacities = params.OPACITIES.split(',') if params.OPACITIES is defined else ["0.25"] %}
        {% set border_sizes = params.BORDER_SIZES.split(',') if params.BORDER_SIZES is defined else ["2", "3", "2.5", "1"] %}
        {% set border_colors = params.BORDER_COLORS.split(',') if params.BORDER_COLORS is defined else ["yellow"] %}
        {% set border_types = params.BORDER_TYPES.split(',') if params.BORDER_TYPES is defined else ["dotted"] %}
        {% set glow_colors = params.GLOW_COLORS.split(',') if params.GLOW_COLORS is defined else ["green"] %}
        {% set glow_sizes = params.GLOW_SIZES.split(',') if params.GLOW_SIZES is defined else ["15", "11"] %}
    {% else %}
        {% set font_colors = params.FONT_COLORS.split(',') if params.FONT_COLORS is defined else ["none", "primary", "error", "warning", "accent", "success", "secondary", "info"] %}
        {% set bg_colors = params.BG_COLORS.split(',') if params.BG_COLORS is defined else ["none", "black", "yellow", "blue", "green", "red"] %}
        {% set font_sizes = params.FONT_SIZES.split(',') if params.FONT_SIZES is defined else ["20", "22", "18", "24"] %}
        {% set bold = params.BOLD.split(',') if params.BOLD is defined else ["none", "bold"] %}
        {% set italic = params.ITALIC.split(',') if params.ITALIC is defined else ["italic", "none"] %}
        {% set lines = params.LINES.split(',') if params.LINES is defined else ["underline", "strike", "none"] %}
        {% set line_colors = params.LINE_COLORS.split(',') if params.LINE_COLORS is defined else ["red", "blue", "green", "yellow"] %}
        {% set fonts = params.FONTS.split(',') if params.FONTS is defined else ["Arial", "Times New Roman", "Verdana", "Helvetica", "Gothic"] %}
        {% set opacities = params.OPACITIES.split(',') if params.OPACITIES is defined else ["0.5", "0.75", "1"] %}
        {% set border_sizes = params.BORDER_SIZES.split(',') if params.BORDER_SIZES is defined else ["2", "3", "2.5", "1"] %}
        {% set border_colors = params.BORDER_COLORS.split(',') if params.BORDER_COLORS is defined else ["none", "black", "yellow", "blue", "green", "red"] %}
        {% set border_types = params.BORDER_TYPES.split(',') if params.BORDER_TYPES is defined else ["none", "solid", "dotted", "double", "groove", "ridge", "inset", "outset"] %}
        {% set glow_colors = params.GLOW_COLORS.split(',') if params.GLOW_COLORS is defined else ["none", "yellow", "green"] | random %}
        {% set glow_sizes = params.GLOW_SIZES.split(',') if params.GLOW_SIZES is defined else ["none", "8", "15", "11"] %}
    {% endif %}

    {% set msg.out = "" %}
    {% set msg.font_color_index = 0 %}
    {% set msg.bg_color_index = 0 %}
    {% set msg.font_size_index = 0 %}
    {% set msg.bold_index = 0 %}
    {% set msg.italic_index = 0 %}
    {% set msg.line_index = 0 %}
    {% set msg.line_color_index = 0 %}
    {% set msg.font_name_index = 0 %}
    {% set msg.opacity_index = 0 %}
    {% set msg.border_size_index = 0 %}
    {% set msg.border_type_index = 0 %}
    {% set msg.border_color_index = 0 %}
    {% set msg.glow_color_index = 0 %}
    {% set msg.glow_size_index = 0 %}
    {% set text = message.split() if by_word else message %}
  
    {% for chars in text %}
        {% set text = chars | string if by_word else chars %}

        {% set font_color = font_colors[msg.font_color_index % font_colors | length] | string if params.RANDOMIZE|lower == "false" else font_colors | random %}
        {% set bg_color = bg_colors[msg.bg_color_index % bg_colors | length] | string if params.RANDOMIZE|lower == "false" else bg_colors | random %}
        {% set font_size = font_sizes[msg.font_size_index % font_sizes | length] | string if params.RANDOMIZE|lower == "false" else font_sizes | random %}
        {% set bold_setting = bold[msg.bold_index % bold | length] | string if params.RANDOMIZE|lower == "false" else bold | random %}
        {% set italic_setting = italic[msg.italic_index % italic | length] | string if params.RANDOMIZE|lower == "false" else italic | random %}
        {% set line_setting = lines[msg.line_index % lines | length] | string if params.RANDOMIZE|lower == "false" else lines | random %}
        {% set line_color = line_colors[msg.line_color_index % line_colors | length] | string if params.RANDOMIZE|lower == "false" else line_colors | random %}
        {% set font_name = fonts[msg.font_name_index % fonts | length] | string if params.RANDOMIZE|lower == "false" else fonts | random %}
        {% set opacity = opacities[msg.opacity_index % opacities | length] | string if params.RANDOMIZE|lower == "false" else opacities | random %}
        {% set border_color = border_colors[msg.border_color_index % border_colors | length] | string if params.RANDOMIZE|lower == "false" else border_colors | random %}
        {% set border_size = border_sizes[msg.border_size_index % border_sizes | length] | string if params.RANDOMIZE|lower == "false" else border_sizes | random%}
        {% set border_type = border_types[msg.border_type_index % border_types | length] | string if params.RANDOMIZE|lower == "false" else border_types | random %}
        {% set glow_color = glow_colors[msg.glow_color_index % glow_colors | length] | string if params.RANDOMIZE|lower == "false" else glow_colors | random %}
        {% set glow_size = glow_sizes[msg.glow_size_index % glow_sizes | length] | string if params.RANDOMIZE|lower == "false" else glow_sizes | random %}           

  
        {% set font_style = 'font-family:' + font_name + ';' %}
        {% set bold_style = 'font-weight:bold;' if bold_setting == 'bold' else '' %}
        {% set italic_style = 'font-style:italic;' if italic_setting == 'italic' else '' %}
        {% set line_color = 'text-decoration-color:' + line_color + ';' %}
        {% set opacity_style = 'opacity:' + opacity + ';' %}
        {% set border_style = 'border: ' + border_size + 'px ' + border_type + ' ' + border_color + ';' %}
        {% set glow_style = 'text-shadow: 0 0 '  +  glow_size + 'px ' + glow_color + ';' %}
        
        {% if line_setting != 'none' %}
            {% set line_style = 'text-decoration:underline;' if line_setting == 'underline' else 'text-decoration:line-through;' %}
        {% endif %}
                
        {% set colored_text.out = style_text(text, font_color, bg_color, font_size, font_style, bold_style, italic_style, line_style, line_color, opacity_style, border_style, glow_style) %}
        {% set msg.out = msg.out + colored_text.out %}
        {% set msg.out = msg.out + ' ' if by_word and not loop.last else msg.out %}
    
        {% set msg.font_color_index = msg.font_color_index + 1 %}
        {% set msg.bg_color_index = msg.bg_color_index + 1 %}
        {% set msg.font_size_index = msg.font_size_index + 1 %}
        {% set msg.bold_index = msg.bold_index + 1 %}
        {% set msg.italic_index = msg.italic_index + 1 %}
        {% set msg.line_index = msg.line_index + 1 %}
        {% set msg.line_color_index = msg.line_color_index + 1 %}
        {% set msg.font_name_index = msg.font_name_index + 1 %}
        {% set msg.opacity_index = msg.opacity_index + 1 %}
        {% set msg.border_size_index = msg.border_size_index + 1 %}
        {% set msg.border_color_index = msg.border_color_index + 1 %}
        {% set msg.border_type_index = msg.border_type_index + 1 %}
        {% set msg.glow_color_index = msg.glow_color_index + 1 %}
        {% set msg.glow_size_index = msg.glow_size_index + 1 %}
    {% endfor %}
  
    { action_respond_info(msg.out) }  
  


